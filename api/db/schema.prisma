// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model Plant {
  id                  String           @id @default(uuid())
  name                String
  price               Decimal
  stock               Int
  categoryId          String
  category            Category         @relation(fields: [categoryId], references: [id])
  presentationType    PresentationType
  presentationDetails String?
  photos              Photo[]
  saleDetails         SaleDetail[] // ðŸ”¹ Added relation to SaleDetail
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  image       String
  plants      Plant[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Customer {
  id        String     @id @default(uuid())
  name      String
  phone     String     @unique
  email     String?
  saleNotes SaleNote[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model SaleNote {
  id          String       @id @default(uuid())
  customerId  String
  customer    Customer     @relation(fields: [customerId], references: [id])
  nurseryId   String
  nursery     Nursery      @relation(fields: [nurseryId], references: [id])
  saleDetails SaleDetail[]
  total       Decimal
  folio       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
}

model SaleDetail {
  id         String   @id @default(uuid())
  saleNoteId String
  saleNote   SaleNote @relation(fields: [saleNoteId], references: [id])
  plantId    String
  plant      Plant    @relation(fields: [plantId], references: [id])
  price      Decimal // Price at which the plant was sold
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Nursery {
  id        String     @id @default(uuid())
  name      String
  address   String
  phone     String
  logo      String?
  rfc       String
  saleNotes SaleNote[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  plantId   String
  plant     Plant    @relation(fields: [plantId], references: [id])
  createdAt DateTime @default(now())
}

enum PresentationType {
  BAG
  POT
  HANGING
}
